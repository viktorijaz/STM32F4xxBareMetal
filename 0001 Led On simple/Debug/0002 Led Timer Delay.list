
0002 Led Timer Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000434  08000434  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000434  08000434  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000434  08000434  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000434  08000434  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800043c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000024  08000460  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000460  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a37  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000222  00000000  00000000  00020a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  00020cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000058  00000000  00000000  00020d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001cf8  00000000  00000000  00020d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000006a1  00000000  00000000  00022a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008294  00000000  00000000  00023111  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002b3a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000010c  00000000  00000000  0002b420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800041c 	.word	0x0800041c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	0800041c 	.word	0x0800041c

080001d8 <Delay_us>:
 * Delay in microseconds
 1. RESET the Counter
 2. Wait for the Counter to reach the entered value. As each count will take 1 us,
 the total waiting time will be the required us delay
 ************************************************/
void Delay_us(uint16_t us) {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	80fb      	strh	r3, [r7, #6]
	*TIM9_CNT = 0;
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <Delay_us+0x2c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
	while (*TIM9_CNT < us);
 80001ea:	bf00      	nop
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <Delay_us+0x2c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d3f9      	bcc.n	80001ec <Delay_us+0x14>
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004

08000208 <Delay_ms>:

/**************************************************
 Delay of 1 miliseconds
 ************************************************/
void Delay_ms(uint16_t ms) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < ms; i++) {
 8000212:	2300      	movs	r3, #0
 8000214:	81fb      	strh	r3, [r7, #14]
 8000216:	e006      	b.n	8000226 <Delay_ms+0x1e>
		Delay_us(1000); // delay of 1 ms
 8000218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021c:	f7ff ffdc 	bl	80001d8 <Delay_us>
	for (uint16_t i = 0; i < ms; i++) {
 8000220:	89fb      	ldrh	r3, [r7, #14]
 8000222:	3301      	adds	r3, #1
 8000224:	81fb      	strh	r3, [r7, #14]
 8000226:	89fa      	ldrh	r2, [r7, #14]
 8000228:	88fb      	ldrh	r3, [r7, #6]
 800022a:	429a      	cmp	r2, r3
 800022c:	d3f4      	bcc.n	8000218 <Delay_ms+0x10>
	}
}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <SysClockConfig>:
 * APB2 Prescaler = 1	// TIMER9 hangs on AP2
 * HSI Frequency(Hz) = 16000000
 * @param None
 * @retval None
 */
void SysClockConfig(void) {
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	 *
	 1. ENABLE HSI and wait for the HSI to become Ready
	 2. Select the Clock Source and wait for it to be set

	 ********************************************************/
	uint32_t *RCC_CR_REG = (uint32_t*) RCC_CR;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <SysClockConfig+0x4c>)
 8000240:	607b      	str	r3, [r7, #4]
	uint32_t *RCC_CFGR_REG = (uint32_t*) RCC_CFGR;
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <SysClockConfig+0x50>)
 8000244:	603b      	str	r3, [r7, #0]

	// 1. ENABLE HSI and wait for the HSI to become Ready
	*RCC_CR_REG |= RCC_CR_HSION;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0201 	orr.w	r2, r3, #1
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
	while (!(*RCC_CR_REG & RCC_CR_HSIRDY));
 8000252:	bf00      	nop
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f003 0302 	and.w	r3, r3, #2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0f9      	beq.n	8000254 <SysClockConfig+0x1c>

	// 2. Select the Clock Source and wait for it to be set
	*RCC_CFGR_REG |= RCC_CFGR_SW_HSI;
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	601a      	str	r2, [r3, #0]
	while ((*RCC_CFGR_REG & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8000268:	bf00      	nop
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f003 030c 	and.w	r3, r3, #12
 8000272:	2b00      	cmp	r3, #0
 8000274:	d1f9      	bne.n	800026a <SysClockConfig+0x32>
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800
 8000288:	40023808 	.word	0x40023808

0800028c <TIM9Config>:
 * Initialize and configure TIMER 9 peripheral
 1. Enable Timer clock
 2. Set the prescalar and the ARR
 3. Enable the Timer, and wait for the update Flag to set
 ************************************************/
void TIM9Config(void) {
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
	//enable Peripheral Clock for APB2
	*RCC_APB2_REG |= RCC_APB2RSTR_TIM9RST;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <TIM9Config+0x50>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <TIM9Config+0x50>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800029e:	601a      	str	r2, [r3, #0]

	// 2. Set the prescalar and the ARR
	*TIM9_PRESCALER_REG = 15;  // 16MHz/(15+1) = 1 MHz ~~ 1 uS delay
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <TIM9Config+0x54>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	220f      	movs	r2, #15
 80002a6:	601a      	str	r2, [r3, #0]
	*TIM9_ARR_REG = 0xffff - 1;  // MAX ARR value
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <TIM9Config+0x58>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80002b0:	601a      	str	r2, [r3, #0]

	// 3. Enable the Timer, and wait for the update Flag to set
	*TIM9_REG |= TIM9EN; // Enable the Counter
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <TIM9Config+0x5c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <TIM9Config+0x5c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f042 0201 	orr.w	r2, r2, #1
 80002c0:	601a      	str	r2, [r3, #0]
	while (!(*TIM9_STATUS_REG & (1 << 0))); // UIF: Update interrupt flag..  This bit is set by hardware when the registers are updated
 80002c2:	bf00      	nop
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <TIM9Config+0x60>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d0f8      	beq.n	80002c4 <TIM9Config+0x38>
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	20000014 	.word	0x20000014
 80002e0:	20000018 	.word	0x20000018
 80002e4:	20000020 	.word	0x20000020
 80002e8:	20000000 	.word	0x20000000
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <GPIO_Init>:

void GPIO_Init(void) {
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	//enable Peripheral Clock for AHB1
	*RCC_AHB1_REG |= 1 << 3;
 80002f4:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <GPIO_Init+0x40>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <GPIO_Init+0x40>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f042 0208 	orr.w	r2, r2, #8
 8000302:	601a      	str	r2, [r3, #0]
	//clear the 30th and 31st bit
	*GPIOD_MODE_REG &= ~(3 << 30);
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <GPIO_Init+0x44>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <GPIO_Init+0x44>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8000312:	601a      	str	r2, [r3, #0]
	//configure PD15 as output
	*GPIOD_MODE_REG |= 1 << 30;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <GPIO_Init+0x44>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <GPIO_Init+0x44>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000322:	601a      	str	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	20000008 	.word	0x20000008
 8000334:	2000000c 	.word	0x2000000c

08000338 <main>:

int main(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

	SysClockConfig();
 800033c:	f7ff ff7c 	bl	8000238 <SysClockConfig>
	TIM9Config();
 8000340:	f7ff ffa4 	bl	800028c <TIM9Config>
	GPIO_Init();
 8000344:	f7ff ffd4 	bl	80002f0 <GPIO_Init>

	while (1) {
		*GPIOD_OUTPUT_REG |= 1 << 15;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <main+0x44>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <main+0x44>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000356:	601a      	str	r2, [r3, #0]
		Delay_ms(500);
 8000358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035c:	f7ff ff54 	bl	8000208 <Delay_ms>
		*GPIOD_OUTPUT_REG &= ~(1 << 15);
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <main+0x44>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <main+0x44>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800036e:	601a      	str	r2, [r3, #0]
		Delay_ms(500);
 8000370:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000374:	f7ff ff48 	bl	8000208 <Delay_ms>
		*GPIOD_OUTPUT_REG |= 1 << 15;
 8000378:	e7e6      	b.n	8000348 <main+0x10>
 800037a:	bf00      	nop
 800037c:	20000010 	.word	0x20000010

08000380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000382:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <LoopForever+0x6>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	; (80003c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <LoopForever+0xe>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	; (80003cc <LoopForever+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ae:	f000 f811 	bl	80003d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b2:	f7ff ffc1 	bl	8000338 <main>

080003b6 <LoopForever>:

LoopForever:
    b LoopForever
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
  ldr   r0, =_estack
 80003b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80003c4:	0800043c 	.word	0x0800043c
  ldr r2, =_sbss
 80003c8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80003cc:	20000040 	.word	0x20000040

080003d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC_IRQHandler>
	...

080003d4 <__libc_init_array>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	4e0d      	ldr	r6, [pc, #52]	; (800040c <__libc_init_array+0x38>)
 80003d8:	4c0d      	ldr	r4, [pc, #52]	; (8000410 <__libc_init_array+0x3c>)
 80003da:	1ba4      	subs	r4, r4, r6
 80003dc:	10a4      	asrs	r4, r4, #2
 80003de:	2500      	movs	r5, #0
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	d109      	bne.n	80003f8 <__libc_init_array+0x24>
 80003e4:	4e0b      	ldr	r6, [pc, #44]	; (8000414 <__libc_init_array+0x40>)
 80003e6:	4c0c      	ldr	r4, [pc, #48]	; (8000418 <__libc_init_array+0x44>)
 80003e8:	f000 f818 	bl	800041c <_init>
 80003ec:	1ba4      	subs	r4, r4, r6
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	2500      	movs	r5, #0
 80003f2:	42a5      	cmp	r5, r4
 80003f4:	d105      	bne.n	8000402 <__libc_init_array+0x2e>
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003fc:	4798      	blx	r3
 80003fe:	3501      	adds	r5, #1
 8000400:	e7ee      	b.n	80003e0 <__libc_init_array+0xc>
 8000402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000406:	4798      	blx	r3
 8000408:	3501      	adds	r5, #1
 800040a:	e7f2      	b.n	80003f2 <__libc_init_array+0x1e>
 800040c:	08000434 	.word	0x08000434
 8000410:	08000434 	.word	0x08000434
 8000414:	08000434 	.word	0x08000434
 8000418:	08000438 	.word	0x08000438

0800041c <_init>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr

08000428 <_fini>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr
