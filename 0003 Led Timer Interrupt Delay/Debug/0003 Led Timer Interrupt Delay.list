
0003 Led Timer Interrupt Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  08000484  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000484  08000484  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08000484  08000484  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000484  08000484  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000484  08000484  00010484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800048c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000028  080004b4  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080004b4  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a69  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000020f  00000000  00000000  00020ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  00020cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000058  00000000  00000000  00020d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001cf8  00000000  00000000  00020d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000676  00000000  00000000  00022a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000082e8  00000000  00000000  00023106  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002b3ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000104  00000000  00000000  0002b46c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800046c 	.word	0x0800046c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	0800046c 	.word	0x0800046c

080001d8 <SysClockConfig>:
 * APB2 Prescaler = 1	// TIMER9 hangs on AP2
 * HSI Frequency(Hz) = 16000000
 * @param None
 * @retval None
 */
void SysClockConfig(void) {
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	 *
	 1. ENABLE HSI and wait for the HSI to become Ready
	 2. Select the Clock Source and wait for it to be set

	 ********************************************************/
	uint32_t *RCC_CR_REG = (uint32_t*) RCC_CR;
 80001de:	4b11      	ldr	r3, [pc, #68]	; (8000224 <SysClockConfig+0x4c>)
 80001e0:	607b      	str	r3, [r7, #4]
	uint32_t *RCC_CFGR_REG = (uint32_t*) RCC_CFGR;
 80001e2:	4b11      	ldr	r3, [pc, #68]	; (8000228 <SysClockConfig+0x50>)
 80001e4:	603b      	str	r3, [r7, #0]

	// 1. ENABLE HSI and wait for the HSI to become Ready
	*RCC_CR_REG |= RCC_CR_HSION;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0201 	orr.w	r2, r3, #1
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	601a      	str	r2, [r3, #0]
	while (!(*RCC_CR_REG & RCC_CR_HSIRDY));
 80001f2:	bf00      	nop
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f003 0302 	and.w	r3, r3, #2
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d0f9      	beq.n	80001f4 <SysClockConfig+0x1c>

	// 2. Select the Clock Source and wait for it to be set
	*RCC_CFGR_REG |= RCC_CFGR_SW_HSI;
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	601a      	str	r2, [r3, #0]
	while ((*RCC_CFGR_REG & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8000208:	bf00      	nop
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f003 030c 	and.w	r3, r3, #12
 8000212:	2b00      	cmp	r3, #0
 8000214:	d1f9      	bne.n	800020a <SysClockConfig+0x32>
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	40023808 	.word	0x40023808

0800022c <TIM9Config>:
 * Initialize and configure TIMER 9 peripheral
 1. Enable Timer clock
 2. Set the prescalar and the ARR
 3. Enable the Timer, and wait for the update Flag to set
 ************************************************/
void TIM9Config(void) {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	//enable Peripheral Clock for APB2
	*RCC_APB2_REG |= RCC_APB2RSTR_TIM9RST;
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <TIM9Config+0x70>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b19      	ldr	r3, [pc, #100]	; (800029c <TIM9Config+0x70>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800023e:	601a      	str	r2, [r3, #0]

	// 2. Set the prescalar and the ARR so that the TimeBase is 1 milisecond
	*TIM9_PRESCALER_REG = 15;  // 16MHz/(15+1) = 1 MHz Counter Clock
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <TIM9Config+0x74>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	220f      	movs	r2, #15
 8000246:	601a      	str	r2, [r3, #0]
	*TIM9_ARR_REG = 1000;  // MAX ARR value
 8000248:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <TIM9Config+0x78>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000250:	601a      	str	r2, [r3, #0]

	// 3. Enable the Timer, and wait for the update Flag to set
	*TIM9_STATUS_REG = 0x00000000;
 8000252:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <TIM9Config+0x7c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
	*TIM9_REG |= TIM9EN; // Enable the Counter
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <TIM9Config+0x80>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <TIM9Config+0x80>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f042 0201 	orr.w	r2, r2, #1
 8000268:	601a      	str	r2, [r3, #0]

	//4. Enable Interrupts
	*TIM9_IRQ_EN |= (1 << 0); //Enable the interrupt
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <TIM9Config+0x84>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <TIM9Config+0x84>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f042 0201 	orr.w	r2, r2, #1
 8000278:	601a      	str	r2, [r3, #0]
	*NVIC_ISER0 |= (1 << 24);
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <TIM9Config+0x88>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <TIM9Config+0x88>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000288:	601a      	str	r2, [r3, #0]

	*TIM9_STATUS_REG = 0x00000000;
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <TIM9Config+0x7c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	20000010 	.word	0x20000010
 80002a0:	20000014 	.word	0x20000014
 80002a4:	2000001c 	.word	0x2000001c
 80002a8:	20000018 	.word	0x20000018
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000024 	.word	0x20000024
 80002b4:	20000020 	.word	0x20000020

080002b8 <GPIO_Init>:

void GPIO_Init(void) {
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	//enable Peripheral Clock for AHB1
	*RCC_AHB1_REG |= 1 << 3;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <GPIO_Init+0x40>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <GPIO_Init+0x40>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f042 0208 	orr.w	r2, r2, #8
 80002ca:	601a      	str	r2, [r3, #0]
	//clear the 30th and 31st bit
	*GPIOD_MODE_REG &= ~(3 << 30);
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <GPIO_Init+0x44>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <GPIO_Init+0x44>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80002da:	601a      	str	r2, [r3, #0]
	//configure PD15 as output
	*GPIOD_MODE_REG |= 1 << 30;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <GPIO_Init+0x44>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <GPIO_Init+0x44>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	20000004 	.word	0x20000004
 80002fc:	20000008 	.word	0x20000008

08000300 <TIM1_BRK_TIM9_IRQHandler>:

void TIM1_BRK_TIM9_IRQHandler(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	//if uif flag of status register is set
	if ((*TIM9_STATUS_REG & (1 << 0))) {
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d006      	beq.n	8000320 <TIM1_BRK_TIM9_IRQHandler+0x20>
		delay_ms(200);
 8000312:	20c8      	movs	r0, #200	; 0xc8
 8000314:	f000 f808 	bl	8000328 <delay_ms>
		*TIM9_STATUS_REG = 0x00000000;
 8000318:	4b02      	ldr	r3, [pc, #8]	; (8000324 <TIM1_BRK_TIM9_IRQHandler+0x24>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
	}

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000018 	.word	0x20000018

08000328 <delay_ms>:

void delay_ms(uint16_t ms) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	80fb      	strh	r3, [r7, #6]
	globcounter += 1;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <delay_ms+0x70>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	4a17      	ldr	r2, [pc, #92]	; (8000398 <delay_ms+0x70>)
 800033a:	6013      	str	r3, [r2, #0]
	if (globcounter == ms) {
 800033c:	88fa      	ldrh	r2, [r7, #6]
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <delay_ms+0x70>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	429a      	cmp	r2, r3
 8000344:	d121      	bne.n	800038a <delay_ms+0x62>
		ledon = !ledon;
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <delay_ms+0x74>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	bf0c      	ite	eq
 800034e:	2301      	moveq	r3, #1
 8000350:	2300      	movne	r3, #0
 8000352:	b2db      	uxtb	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <delay_ms+0x74>)
 8000358:	601a      	str	r2, [r3, #0]
		if (!ledon) {
 800035a:	4b10      	ldr	r3, [pc, #64]	; (800039c <delay_ms+0x74>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d108      	bne.n	8000374 <delay_ms+0x4c>
			*GPIOD_OUTPUT_REG |= 1 << 15;
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <delay_ms+0x78>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <delay_ms+0x78>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	e007      	b.n	8000384 <delay_ms+0x5c>
		} else {
			*GPIOD_OUTPUT_REG &= ~(1 << 15);
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <delay_ms+0x78>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <delay_ms+0x78>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000382:	601a      	str	r2, [r3, #0]
		}

		globcounter = 0;
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <delay_ms+0x70>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
	}
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000048 	.word	0x20000048
 800039c:	20000044 	.word	0x20000044
 80003a0:	2000000c 	.word	0x2000000c

080003a4 <main>:

int main(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

	SysClockConfig();
 80003a8:	f7ff ff16 	bl	80001d8 <SysClockConfig>
	GPIO_Init();
 80003ac:	f7ff ff84 	bl	80002b8 <GPIO_Init>
	TIM9Config();
 80003b0:	f7ff ff3c 	bl	800022c <TIM9Config>

	globcounter = 0;
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <main+0x24>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
	ledon = 0;
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <main+0x28>)
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	2300      	movs	r3, #0

}
 80003c2:	4618      	mov	r0, r3
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000048 	.word	0x20000048
 80003cc:	20000044 	.word	0x20000044

080003d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d0:	480d      	ldr	r0, [pc, #52]	; (8000408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <LoopForever+0x6>)
  ldr r1, =_edata
 80003da:	490d      	ldr	r1, [pc, #52]	; (8000410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003dc:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <LoopForever+0xe>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f0:	4c0a      	ldr	r4, [pc, #40]	; (800041c <LoopForever+0x16>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fe:	f000 f811 	bl	8000424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000402:	f7ff ffcf 	bl	80003a4 <main>

08000406 <LoopForever>:

LoopForever:
    b LoopForever
 8000406:	e7fe      	b.n	8000406 <LoopForever>
  ldr   r0, =_estack
 8000408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000414:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 8000418:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800041c:	2000004c 	.word	0x2000004c

08000420 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC_IRQHandler>
	...

08000424 <__libc_init_array>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	4e0d      	ldr	r6, [pc, #52]	; (800045c <__libc_init_array+0x38>)
 8000428:	4c0d      	ldr	r4, [pc, #52]	; (8000460 <__libc_init_array+0x3c>)
 800042a:	1ba4      	subs	r4, r4, r6
 800042c:	10a4      	asrs	r4, r4, #2
 800042e:	2500      	movs	r5, #0
 8000430:	42a5      	cmp	r5, r4
 8000432:	d109      	bne.n	8000448 <__libc_init_array+0x24>
 8000434:	4e0b      	ldr	r6, [pc, #44]	; (8000464 <__libc_init_array+0x40>)
 8000436:	4c0c      	ldr	r4, [pc, #48]	; (8000468 <__libc_init_array+0x44>)
 8000438:	f000 f818 	bl	800046c <_init>
 800043c:	1ba4      	subs	r4, r4, r6
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	2500      	movs	r5, #0
 8000442:	42a5      	cmp	r5, r4
 8000444:	d105      	bne.n	8000452 <__libc_init_array+0x2e>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800044c:	4798      	blx	r3
 800044e:	3501      	adds	r5, #1
 8000450:	e7ee      	b.n	8000430 <__libc_init_array+0xc>
 8000452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000456:	4798      	blx	r3
 8000458:	3501      	adds	r5, #1
 800045a:	e7f2      	b.n	8000442 <__libc_init_array+0x1e>
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000484 	.word	0x08000484
 8000468:	08000488 	.word	0x08000488

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
